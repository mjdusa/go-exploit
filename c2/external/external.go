package external

import (
	"github.com/vulncheck-oss/go-exploit/c2/channel"
	"github.com/vulncheck-oss/go-exploit/output"
)

type Server struct {
	Read    any
	Write   any
	flags   func()
	init    func()
	run     func(int)
	meta    func(*channel.Channel)
	Channel *channel.Channel
}

type External interface {
	Configure(*Server)
	SetFlags(func())
	SetInit(func())
	SetRun(func(int))
	SetChannel(func(*channel.Channel))
}

var serverSingleton *Server

func GetInstance() *Server {
	if serverSingleton == nil {
		serverSingleton = new(Server)
	}

	return serverSingleton
}

func (externalServer *Server) SetFlags(f func()) {
	if f == nil {
		panic("Flags *must* be a valid function")
	}
	externalServer.flags = f
}

func (externalServer *Server) CreateFlags() {
	if externalServer.flags == nil {
		panic("Flags *must* be a valid function")
	}
	externalServer.flags()
}

func (externalServer *Server) SetInit(f func()) {
	if externalServer.flags == nil {
		panic("Init *must* be a valid function")
	}
	externalServer.init = f
}

func (externalServer *Server) InitServer(channel channel.Channel) bool {
	if externalServer.flags == nil {
		panic("Init *must* be a valid function")
	}

	return externalServer.Init(channel)
}

func (externalServer *Server) SetChannel(f func(*channel.Channel)) {
	externalServer.meta = f
}

func (externalServer *Server) Init(channel channel.Channel) bool {
	if channel.IsClient {
		output.PrintFrameworkError("Called ExternalServer as a client.")

		return false
	}
	externalServer.init()
	externalServer.meta(&channel)

	return true
}

func (externalServer *Server) SetRun(f func(int)) {
	externalServer.run = f
}

func (externalServer *Server) Run(timeout int) {
	externalServer.run(timeout)
}
